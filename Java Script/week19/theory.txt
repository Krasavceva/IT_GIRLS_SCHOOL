Неделя 19 вопросы:
1. Чем отличается класс от объекта? Приведите примеры и того, и другого, отличные от указанных в уроке.
КЛАСС - это структура(шаблон), которая описывает способы и методы объекта. У класса может быть множество объектов(экземпляров).
ОБЪЕКТ - конкретный элемент с уде заполненными свойствами и методами на основе этой структуры

2. Приведите примеры объектно-ориентированного подхода в реальной жизни.
ООП в реальной жизни:
СЕМЬЯ могла бы иметь классы:
члены семьи(Имена, даты рождения, пол, возраст и т.д.)
питомцы(Вид, клички, команды, возраст).
КОЛЛЕКЦИЯ ВЕЩЕЙ (название, качество, цвет, размер, цена)
ООП в программировании:
КОМПЬЮТЕРНАЯ ИГРА (выбор персонажа, его тип, имя, навыки)
ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ (ФИО, логин, фото, избранное, личные данные)

3. Что такое конструктор? Самостоятельно изучите и напишите, какие бывают виды конструкторов.
КОНСТРУКТОР - специальный блок инструкций, задача которых заполнить пустой объект свойствами и методами.
Самым простым способом создания объекта является использование конструктора Object().
Ключевое слово this - это то, что отличает конструктор от обычной функции.
Конструктор использует в своем теле ключевое слово this, чтобы в объект добавить какие-то свойства. Ключевое слово this в момент запуска функции всегда ссылается на пустой объект, который был создан с помощью оператора new.
Основные конструкторы -- Object(), Array(), Function(), Date(), String().

4. В консоли выведет name всех 3 объектов:
код выведет:
bike()// ninja
obj1.bike()// pomido
robj2.bike()// site
В первом случае функция вызывается в глобальном контексте выполнения (window) и находит объявленную переменную name = ninja.
В остальных случаях функция обращается к объекту this, получая свойство name текущего контекста.

5. Чем статические свойства и методы отличаются от нестатических? В каких ситуациях они применяются?
Статические методы и свойства класса:
- не привязаны к конкретному объекту
- могут существовать  без создания экземпляра и слова new
- в классе обозначаются static- используются  для реализации функций, принадлежащих классу, но не к конкретным его объектам
- используются в классах, относящихся к базам данных, для поиска/сохранения/удаления вхождений в базу данных- используются для создания классов-калькуляторов, классов-утилит, классов-помощников для работы с какими-то другими классами

6. Самостоятельно изучите, что такое геттеры и сеттеры, приведите пример класса с их использованием.
Геттер (get) - метод, который получает значение определённого свойства.
Сеттер (set) - метод, который присваивает значение определённому свойству объекта.
 class Car {
            constructor(cost) {
                this.cost = cost
            }
            changeCost(newCost) {
                return this.cost = this.cost + newCost;
            }
            getCost() {
                return this.cost
            }
            get newCost() {
                return this.cost
            }
            set newCost(cost) {
                return this.cost = this.cost + cost;
            }
        }
        const car = new Car(500);

7. Код выводит OBJECT.
Person - это класс, по его структуре создался объект - константа member со свойством name = John.

8. Код выведет {name: 'Valera', age: 23}. Для добавления свойства city нужно было обратиться к person.city напрямую(person.city = "Amsterdam")