ВОПРОСЫ week20:

1.Напишите JSON к вашим ответам на вопрос 2 из прошлой недели. Например, если вы ответили Книга (название, автор, год выпуска), 
то JSON может выглядеть так (минимум 3 примера):

ПИТОМЦЫ(Вид, кличка,команды, возраст).
{
    "animal": "Собака",
    "name": "Баскет",
    "commands": [
        "лежать",
        "голос",
        "сидеть"
    ],
    "age": "5 лет"
}

ЧЛЕНЫ СЕМЬИ(Имена, даты рождения, пол, возраст)
[{
    "name": "Дмитрий",
    "birhtday": "10.08.1980 г.",
    "sex": "мужской",
    "age": 41
},{
    "name": "Виктория",
    "birhtday": "31.10.1991 г.",
    "sex":"женский",
    "age": 31
},{
    "name": "Михаил",
    "birhtday": "21.05.2016 г.",
    "sex":"мужской",
    "age": 6
},{
    "name": "Павел",
    "birhtday": "24.03.2018 г.",
    "sex":"мужской",
    "age": 4
}]

ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ (ФИО, логин, возраст, работа)
{
    "name": "Петя",
    "login": "petya123",
    "age": 34,
    "company": {
        "name": "Google",
        "address": "США Калифорния",
    }
}


2. Самостоятельно разберитесь, что за формат данных XML и чем он отличается от JSON? 
Приведите пример, как один и тот же объект собачки с картинки ниже будет выглядеть в JSON и в XML?

JSON(JavaScript Object Notation) 
- формат данных, который имеет собственный независимый стандарт и библиотеки для большинства языков программирования.
- данные хранятся в виде карты с парами ключ-значение
- более быстрая передача данных за счет легковесности и быстрого синтаксического анализа с помощью механизма JS
- поддерживает: строки, числа, массивы и объекты
- поддерживается всеми современными браузерами, но не поддерживается старыми

{
    'breed': 'Beagle',
    'size': 'large',
    'colour': 'orange',
    'age': '6 years'
}

XML(Extensible Markup Language)
- расширенный язык разметки 
- данные хранятся в виде древовидной структуры (большой файл сложный для чтения)
- может выполнять обработку и форматирование документов и объектов
- долгий и медленный анализ, ведущий к медленной передаче данных
- не поддерживает массив напрямую
- поддерживает множество сложных типов данных, включая диаграммы, изображения и другие типы данных

    <breed>Beagle</breed>
    <size>large</size>
    <colour>orange</colour>
    <age>6 years</age>

    
3.Что такое сериализация и десериализация (парсинг)? В каких ситуациях они нужны? 

Сериализация - процесс преобразования данных, которые необходимо отправить на сервер, в строку JSON-формата. 
Для сериализации объекта javascript в json применяется функция JSON.stringify().
Десериализация - парсинг json-объекта в javascript, применяется метод JSON.parse().
Эти  процессы нужны в ситуациях, когда:
- нужно передать информацию от веб-сервера клиенту
- если нам нужно отправить какие-то данные на сервер
- для хранения и получения данных в веб-хранилищах (localStorage и sessionStorage)

4. Можно ли обработать ответ от сервера одновременно и как текст, и как JSON?
Нельзя. Можно выбрать только один метод чтения ответа.  Не сработает, так как данные уже были обработаны.

5. В чем особенность асинхронных запросов?
Действия выполняются без определенного порядка, в фоновом режиме (не в основном потоке), таким образом, что это не мешает пользователю взаимодействовать со страницей.

6. В чем преимущество AJAX-запросов перед старым способом работы с сервером через <form action="имя скрипта на сервере">?
- снижение трафика (из-за уменьшения объёма передаваемых данных между клиентом и сервером)
- уменьшение нагрузки на сервер (не нужно генерировать всю страницу, а только ту часть, которую нужно обновить)
- увеличение быстродействия и отзывчивости (нет необходимости в полной перезагрузки страницы, достаточно обновить содержимое только отдельных блоков)
- повышение интерактивности (с помощью AJAX можно сразу отображать результаты и сделать ресурс более удобным для пользования)

7. Напишите, как будет выглядеть `fetch` для получения данных вашего пользователя на github? Адрес URL для запроса должен выглядеть так: 
    `'https://api.github.com/users/сюда подставьте свой логин с github'`

     document.addEventListener("DOMContentLoaded", function (event) {
fetch("https://api.github.com/users/Krasavceva")
.then(response => response.json())
.then(user => {
    document.getElementById("avatar").src=user.avatar_url;
document.getElementById("userName").innerText=user.name;
})
.catch(error => console.log(error));
});

8. Самостоятельно разберитесь, что такое SPA? 

SPA - Single Page Application - одностраничное приложение. SPA может обмениваться данными с сервером без перезагрузки страницы, с помощью ajax-запросов. Благодаря этому наполнение страницы может меняться динамически.

Одностраничные приложения чаще всего используют в сервисах, где пользователь проводит на одной странице много времени или совершает с ней какие-то действия, например:
- просматривает почту и отмечает письма как спам;
- пишет посты и комментирует чужие;
- смотрит сериалы;
- выбирает квартиру;
- разглядывает картинки и собирает их в тематические доски.

Преимущества SPA:
- SPA быстрые. 
Переход между модулями в приложении происходит быстрее: нужные ресурсы уже загружены, нужно просто подставить данные, которые запросил пользователь. Часто при этом сервер возвращает не тяжеловесный HTML, а лёгкий JSON или XML.

- SPA гибкие.
Раз пользователь всё время работает с одной страницей, проще делать интересные переходы и анимацию элементов. Можно работать с состоянием кнопок, вкладок и переключателей. Таким образом, интерфейс SPA может быть похож скорее на полноценное приложение, а не на простой сайт.

- SPA работают везде.
Всё, что нужно для SPA — поддержка JavaScript. Такие сайты хорошо работают и на десктопе, и в вебе, могут отчасти заменить полноценные мобильные приложения.

Недостатки SPA:
- Проблемы с SEO.
Чтобы корректно собирать аналитику, придётся самостоятельно настроить отслеживание нужных событий.

- Зависимость от интернета.
Для запуска веб-приложения нужна связь с сервером, так что в большинстве случаев без интернета не обойтись, как и с обычными сайтами.